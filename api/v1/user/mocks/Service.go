// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import form "github.com/moemoe89/go-grpc-server-tisa/api/v1/api_struct/form"
import mock "github.com/stretchr/testify/mock"
import model "github.com/moemoe89/go-grpc-server-tisa/api/v1/api_struct/model"

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// Create provides a mock function with given fields: req
func (_m *Service) Create(req *form.UserForm) (*model.UserModel, error) {
	ret := _m.Called(req)

	var r0 *model.UserModel
	if rf, ok := ret.Get(0).(func(*form.UserForm) *model.UserModel); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserModel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*form.UserForm) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *Service) Delete(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Detail provides a mock function with given fields: id, selectField
func (_m *Service) Detail(id string, selectField string) (*model.UserModel, error) {
	ret := _m.Called(id, selectField)

	var r0 *model.UserModel
	if rf, ok := ret.Get(0).(func(string, string) *model.UserModel); ok {
		r0 = rf(id, selectField)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserModel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(id, selectField)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: filter, filterCount, where, orderBy, selectField
func (_m *Service) List(filter map[string]interface{}, filterCount map[string]interface{}, where string, orderBy string, selectField string) ([]*model.UserModel, int, error) {
	ret := _m.Called(filter, filterCount, where, orderBy, selectField)

	var r0 []*model.UserModel
	if rf, ok := ret.Get(0).(func(map[string]interface{}, map[string]interface{}, string, string, string) []*model.UserModel); ok {
		r0 = rf(filter, filterCount, where, orderBy, selectField)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.UserModel)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(map[string]interface{}, map[string]interface{}, string, string, string) int); ok {
		r1 = rf(filter, filterCount, where, orderBy, selectField)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(map[string]interface{}, map[string]interface{}, string, string, string) error); ok {
		r2 = rf(filter, filterCount, where, orderBy, selectField)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Update provides a mock function with given fields: req, id
func (_m *Service) Update(req *form.UserForm, id string) (*model.UserModel, error) {
	ret := _m.Called(req, id)

	var r0 *model.UserModel
	if rf, ok := ret.Get(0).(func(*form.UserForm, string) *model.UserModel); ok {
		r0 = rf(req, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserModel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*form.UserForm, string) error); ok {
		r1 = rf(req, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
